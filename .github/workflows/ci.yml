name: Django CI
on: [ push, pull_request ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

      redis:
        image: redis
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY}}
          DB_NAME: DRF3
          DB_USER: postgres
          DB_PASSWORD: Aa19951970a
          HOST: localhost
          PORT: 5432
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/DRF3
          REDIS_HOST: redis://localhost:6379
        ports:
          - 6379:6379

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install poetry && poetry config virtualenvs.create false &&  poetry install --no-root


      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run migrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY}}
          DB_NAME: DRF3
          DB_USER: postgres
          DB_PASSWORD: Aa19951970a
          HOST: localhost
          PORT: 5432
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/DRF3
        run: python manage.py migrate

      - name: Wait for Redis
        run: |
          until nc -z localhost 6379; do
            echo "Waiting for Redis..."
            sleep 1
          done

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY}}
          DB_NAME: DRF3
          DB_USER: postgres
          DB_PASSWORD: Aa19951970a
          HOST: localhost
          PORT: 5432
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/DRF3
          REDIS_HOST: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379
          CELERY_RESULT_BACKEND: redis://localhost:6379
        run: python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image app
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/app:${{ github.sha }} .

      - name: Build Docker image nginx
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:${{ github.sha }} nginx/.

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            sudo docker compose down 
            cd ..
            sudo rm -rf ${{ secrets.DEPLOY_DIR }}
            git clone https://github.com/Artemteben/Docker2.git          
            cd ${{ secrets.DEPLOY_DIR }}  
            cp ../.env .env 
            sudo docker compose up -d --build
          EOF
