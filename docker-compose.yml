services:
  backend:
    container_name: lms-backend
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"

    environment:
      - POSTGRES_HOST=db
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env


  db:
    container_name: lms-db
    image: postgres:16.0
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 3s
      retries: 10


  redis:
    image: redis:latest
    container_name: lms-redis
    command: [ "redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru" ]
    env_file:
      - .env
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 3s
      retries: 10


  celery:
    container_name: lms-celery_worker
    build: .
    command: celery -A config worker -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env


  celery-beat:
    container_name: lms-celery_beat
    build: .
    command: celery -A config beat -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  nginx:
    build: ./nginx
    ports:
      - "8081:8081"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles

    depends_on:
      - backend


networks:
  default:

volumes:

  postgres_data:
  static_volume:
  redis_data: